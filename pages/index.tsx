import Head from 'next/head';
import { css } from '@emotion/react';
import { useState } from 'react';
import Image from 'next/image';

const formStyles = css`
  display: flex;
  flex-direction: column;

  align-items: center;
  gap: 12px;
  border: 2px solid black;
`;
const selectStyles = css`
  width: 150px;
  font-size: 16px;
  text-align: center;
  padding: 4px;
`;
const inputSubmitStyles = css`
  font-size: 16px;
  padding: 4px 0px;
  cursor: pointer;
`;

type CreateRecipeResponseBody = {
  recipe: {
    id: number;
    effort: string;
    imageurl: string;
    name: string;
    taste: string;
    type: string;
  };
};
export default function Home() {
  const [foodType, setFoodType] = useState('');
  const [foodTaste, setFoodTaste] = useState('');
  const [foodEffort, setFoodEffort] = useState('');
  const [recipeBoolean, setRecipeBoolean] = useState(false);
  const [randomRecipeImage, setRandomRecipeImage] = useState('');
  const [randomRecipeName, setRandomRecipeName] = useState('');

  function handleSelectFoodType(event: React.ChangeEvent<HTMLSelectElement>) {
    const type = event.target.value;
    setFoodType(type);
  }
  function handleSelectFoodTaste(event: React.ChangeEvent<HTMLSelectElement>) {
    const taste = event.target.value;
    setFoodTaste(taste);
  }
  function handleSelectFoodEffort(event: React.ChangeEvent<HTMLSelectElement>) {
    const effort = event.target.value;
    setFoodEffort(effort);
  }

  return (
    <div>
      <Head>
        <title>Random Recipe Generator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>Willkommen zu Omas zufälligem Rezeptgenerator</h1>
        <form
          css={formStyles}
          onSubmit={async (e) => {
            e.preventDefault();

            const createPersonResponse = await fetch('/api/recipe', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                type: foodType,
                taste: foodTaste,
                effort: foodEffort,
              }),
            });

            const createRecipeResponseBody =
              (await createPersonResponse.json()) as CreateRecipeResponseBody;
            console.log(createRecipeResponseBody);
            if ('recipe' in createRecipeResponseBody) {
              setRecipeBoolean(true);
              setRandomRecipeImage(createRecipeResponseBody.recipe.imageurl);
              setRandomRecipeName(createRecipeResponseBody.recipe.name);

              //   setEventList(createdEvents);
              //   setEventName('');
            }

            // if ('errors' in createRecipeResponseBody) {
            //   setErrors(createRecipeResponseBody.errors);
            //   return;
            // }
          }}
        >
          <div>
            <div>
              <label htmlFor="food-type">Speisenart: </label>
              <select
                name="food-type"
                css={selectStyles}
                onChange={handleSelectFoodType}
                required
              >
                <option value="">Optionen</option>

                <option value="starter">Vorspeise</option>
                <option value="main">Hauptspeise</option>
                <option value="dessert">Nachspeise</option>
              </select>
            </div>
            <div>
              <label htmlFor="food-taste">Salzig oder Süß: </label>
              <select
                name="food-taste"
                css={selectStyles}
                onChange={handleSelectFoodTaste}
                required
              >
                <option value="">Optionen</option>
                <option value="salt">Salzig</option>
                <option value="sweet">Süß</option>
              </select>
            </div>
            <div>
              <label htmlFor="food-effort">Aufwand: </label>
              <select
                name="food-effort"
                css={selectStyles}
                onChange={handleSelectFoodEffort}
                required
              >
                <option value="">Optionen</option>
                <option value="low">Gering</option>
                <option value="middle">Mittel</option>
                <option value="high">Hoch</option>
              </select>
            </div>
          </div>
          <input
            css={inputSubmitStyles}
            type="submit"
            value="Suche ein Rezept"
          />
        </form>
        {recipeBoolean && (
          <div>
            <h2>{randomRecipeName}</h2>
            <Image
              src={randomRecipeImage}
              height="350px"
              width="480px"
              alt="Image of the random recipe"
            />
          </div>
        )}
      </main>
    </div>
  );
}
